<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wss.cool</title>
    <link>https://docs.wss.cool/</link>
    <description>Recent content on wss.cool</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://docs.wss.cool/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>With ToC</title>
      <link>https://docs.wss.cool/docs/example/table-of-contents/with-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/example/table-of-contents/with-toc/</guid>
      <description>Caput vino delphine in tamen vias Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.
 Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere Pectora et sine mulcere, coniuge dum tincta incurvae.</description>
    </item>
    
    <item>
      <title>Without ToC</title>
      <link>https://docs.wss.cool/docs/example/table-of-contents/without-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/example/table-of-contents/without-toc/</guid>
      <description>At me ipso nepotibus nunc celebratior genus Tanto oblite Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.
Quam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://docs.wss.cool/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://docs.wss.cool/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Example Site</title>
      <link>https://docs.wss.cool/docs/example/example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/example/example/</guid>
      <description>Introduction Ferre hinnitibus erat accipitrem dixi Troiae tollens Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.
 Pedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret  Est simul fameque tauri qua ad Locum nullus nisi vomentes.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://docs.wss.cool/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://docs.wss.cool/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/0.%E5%89%8D%E7%AB%AF/event-loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/0.%E5%89%8D%E7%AB%AF/event-loop/</guid>
      <description>Event Loop  函数调用形成执行栈，执行完弹出。 当执行栈为空时，检查消息队列。 获取第一个消息，调用其绑定的回调函数。此时又循环回第一步。  上面的三部分的循环进行就是Event Loop。
一个事件循环具有一个或多个任务队列。任务队列是一组任务。
当执行栈为空时，会优先检查「微任务队列」。
 微任务队列 常用的就是Promise 任务队列 可以理解为timeout、用户时间、网路请求事件   研究规范 任务队列是集合，而不是队列1，因为事件循环处理模型的第一步是从所选队列中获取第一个可运行任务，而不是使第一个任务出队。
微任务队列不是任务队列。2
每个事件循环都有一个微任务队列，该队列是一个微任务队列，最初是空的。微任务是一种通俗的方式，指的是通过「queue a microtask」算法创建的任务。
https://html.spec.whatwg.org/multipage/webappapis.html#generic-task-sources
  Task queues are sets, not queues. event-loop规范 &amp;#x21a9;&amp;#xfe0e;
 The microtask queue is not a task queue. event-loop规范 &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/0.%E5%89%8D%E7%AB%AF/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/0.%E5%89%8D%E7%AB%AF/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
      <description>原型与原型链 我认为这是一个过时的知识，而且晦涩难懂，学习它很浪费时间。如果代码中有大量的原型代码，对于维护是一个很大的挑战。
这东西主要用于面向对象，ES6提供了class和extend来代替我们直接操作原型，是个更好的选择。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/0.%E5%89%8D%E7%AB%AF/%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/0.%E5%89%8D%E7%AB%AF/%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>执行环境及作用域 执行环境定义了变量和函数有权访问的其他数据，决定了它们各自的行为。
每个执行环境关联一个变量对象，环境中的所有变量和函数都保存在这个对象中。
每个函数都有自己的执行环境。
执行环境就是代码执行时的上下文环境，其中包含代码可访问的所有变量和函数，可以理解为执行环境就是变量对象，就是作用域。
函数有自己的作用域，当函数中又点用来函数时，就存在来2个作用域，它们形成了作用域链。
作用域链的最前端，时当前执行代码所在环境的对象变量。如果环境是函数，则将活动对象作为环境变量。
活动对象最开始只包含一个arguments对象。
标识符解析会沿着作用域链搜索。
 箭头函数的this与作用域有关。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/0.%E5%89%8D%E7%AB%AF/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/0.%E5%89%8D%E7%AB%AF/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>数据类型 变量的值分为基本类型和引用类型。
基本类型有五种：String、Number、Boolean、Undefined和Null。
引用类型也就是对象，之所以叫“引用”是因为变量其实是对对象的内存地址的引用。当出现下面这样的操作时，赋值传递的是引用。
var a = 引用类型; var b = a; a 和 b 其实引用的是一个对象，当对 a 或 b 任意一方进行修改时，都会在另一个身上体现出来。
 对于JavaScript的某些对象还可以把它们叫做「宿主对象」或「原生对象」。
宿主对象是JavaScript运行环境提供的对象。浏览器就是一个运行环境，它提供了DOM和BOM等对象。
 DOM对象：window、document等 BOM对象：history、location、navigator等  原生对象是JavaScript语言提供的，比如Math、Array、Date、RegExp等，还有ES6的Set、Map等。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/0.%E5%89%8D%E7%AB%AF/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/0.%E5%89%8D%E7%AB%AF/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>深浅拷贝 什么是拷贝，什么是深浅拷贝 在 JavaScript 中，变量中保存的是对象的引用。比如像下面这样的操作
var a = 对象1; var b = a; a和b都在引用对象1，如果对对象1进行修改，则a和b两个变量都会受到影响，有时我们不希望出现这种情况，就要对对象进行拷贝操作来切换引用。比如
var a = 对象1; var b = 拷贝(a); 那么如何实现拷贝呢？
我们知道对象是由多个key和value组成的，所以拷贝就是创建一个新的对象，将旧对象的key和value拷贝到新对象中，让新旧对象的key和value完全一样。比如像下面这样
Object.keys(对象1).forEach(key =&amp;gt; { 新对象[key] = 对象1[key]; }) 这样的操作需要注意value的类型，分为基本类型和引用类型1，如果所有的value都是基本类型，但是如果value是引用类型就会出现新旧对象中都引用了一个对象的情况，也就是上文提到的a和b变量的问题。..如果想完全切断引用，就要对引用类型的value在进行一次拷贝..。对于是否需要完全切断引用就有了两种拷贝方式，需要完全切断引用的就是「深拷贝」，不需要的就是「浅拷贝」。
简单概括一下。
「浅拷贝」是只对对象的key和value进行一次遍历拷贝，不管内部的引用。
「深拷贝」要将对象内部的引用完全切断，对对象进行递归地拷贝。
如何实现深拷贝 先看一种实现方式
1function clone(旧对象) { 2 var 新对象 = {}; 3 Object.keys(旧对象).forEach(key =&amp;gt; { 4 var value = 旧对象[key]; 5 if(is基本类型(value)) { 6 新对象[key] = 旧对象[key]; 7 } else { 8 新对象[key] = clone(value); // 递归 9 } 10 }) 11 return 新对象; 12}  这种方法用的是递归，即当value不是基本类型时就对它进行拷贝。它有一个明显的问题，当出现循环引用时，就进入了一个死循环。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/0.%E5%89%8D%E7%AB%AF/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/0.%E5%89%8D%E7%AB%AF/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</guid>
      <description>箭头函数 箭头函数的特点：
 比函数表达式简短 不绑定this、arguments、super 不能作为构造函数  this 普通函数中的this，是在被调用的时候确定的。而箭头函数的this由作用域决定。
普通函数：
 构造函数中，指向新对象 对象的方法，指向对象 直接调用函数，指向全局变量window apply、bind、call，指向参数  箭头函数不会创建自己的this，它只会从自己的作用域链的上一层继承this。
 延伸问题：什么是作用域？
 需要注意下面这种情况
&amp;#39;use strict&amp;#39;; var obj = { i: 10, b: () =&amp;gt; console.log(this.i, this), c: function() { console.log( this.i, this) } } obj.b(); // undefined, Window{...} obj.c(); // 10, Object {...} 这是因为(对象字面量构成的)对象不构成单独的作用域，导致箭头函数定义时的作用域就是全局作用域。
参考  阮一峰.ECMAScript 6入门.函数的扩展 MDN web docs.箭头函数  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/1.%E7%A8%8B%E5%BA%8F%E5%91%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hash%E8%A1%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/1.%E7%A8%8B%E5%BA%8F%E5%91%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hash%E8%A1%A8/</guid>
      <description>Hash表 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/1.%E7%A8%8B%E5%BA%8F%E5%91%98/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/1.%E7%A8%8B%E5%BA%8F%E5%91%98/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/</guid>
      <description>排序 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/1.%E7%A8%8B%E5%BA%8F%E5%91%98/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/tcp%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/1.%E7%A8%8B%E5%BA%8F%E5%91%98/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/tcp%E5%8D%8F%E8%AE%AE/</guid>
      <description>学习TCP 三次握手  SYN：client 随机生成起始分组序列号 x ，并发送SYN分组，还有其他TCP表示和选项 SYN ACK：server 将 x+1 ，生成随机序列号 y ACK：client 将 x + 1，y + 1，发送ACK分组，完成握手。此时可以发起请求，比如 Http Get 。  慢启动 完成了三次握手，client发送了http/get请求，server处理完请求开始发送响应数据，新TCP链接传输的最大值取rwnd和cwnd的最小值，也就是4个TCP段。client收到4个TCP段后分别发送ACK确认，也就是4个ACK确认。server收到4个ACK，每收到一个ACK，慢启动算法会让服务器cwnd递增一个TCP段，此时cwnd就增加到8个TCP段。这就是慢启动和指数增长。
 rwnd 缩放窗口 cwnd 拥塞窗口 TCP段 一个TCP数据包。负载1460字节 + TCP头信息20字节 + IP头信息20字节 + 以太网头信息22字节 = 以太网数据包1522字节 4个TCP段 协议规定的服务器默认cwnd值，新版协议是10个。  参考  阮一峰.TCP 协议简介.[2017年6月8日] Ilya Grigorik.Web性能权威指南.李松峰译.北京:人民邮电出版社，2014  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/1.%E7%A8%8B%E5%BA%8F%E5%91%98/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/1.%E7%A8%8B%E5%BA%8F%E5%91%98/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/websocket/</guid>
      <description>WebSocket 第一部分：WebSocket API
二进制的类型 WebSocket的消息可以是文本或者二进制数据，可以设置接收二进制数据的格式：Blob、ArrayBuffer。
 Blob是不可变的文件对象，适合直接保存、传给img ArrayBuffer适合放在内存中进行操作  二进制数据可以用于传输文件、图片。普通消息用文本。
排队 发送消息前检查客户端缓冲的数据量。
if(ws.bufferedAmount === 0) { ws.send(message); } 消息按照客户端排队的顺序逐个发送，大量的消息甚至一个大消息，都会导致排在后面的消息延迟——队首阻塞！
子协议 通过使用子协议来沟通元数据，可以在JSON中定义一个字段，可以使用文本+二进制。
WebSocket提供了协商子协议的API——构造函数的第二个参数。浏览器选择一个协议，如果一个不选就会断开连接。
第二部分：WebSocket协议
协议 HTTP握手协商连接参数，二进制消息分帧进行文本和二进制数据消息传输。
二进制分帧层 将一个消息分成若干帧，传输以帧为单位进行，发送到目的地后组成起来，等接收到完整的消息时再通知接收方。
容易发生队首阻塞，因为消息的帧不能交错发送，要等一个消息的帧发送完了才会发送下一个消息的帧。
不支持多路复用，每个WebSocket连接需要一个TCP连接。
HTTP升级协商  HTTP握手 Connection: Upgrade 跨域  性能 XHR轮询、SSE（EventSource协议）、WebSocket协议。
轮询有间隔时间，SSE客户端不能给服务端发消息，SSE和WebSocket都可以立即发消息。
实战 使用sockjs
使用stompjs
断线重连</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/3.%E9%9D%A2%E8%AF%95/js%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/3.%E9%9D%A2%E8%AF%95/js%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>JS相关问题 1. 请解释事件代理 (event delegation)。 解答 比如有body&amp;gt;div&amp;gt;button，事件代理就是在一个高级元素（body）上绑定一个事件处理函数处理其子元素，利用了事件冒泡机制。
好处节省内存和事件。因为事件处理函数就是一个对象，对象会占用内存，绑定处理函数也会花费事件。
延伸
  2. 请解释 JavaScript 中 this 是如何工作的。 解答 this指向函数运行时所在的对象，而不是创建时。
比如，对象a的b属性是一个函数，其中打印this。当调用a.b()时打印的是对象a。如果把a.b赋值给一个变量c，在调用c，则打印出来的this是全局变量window。 当函数作为对象的方法时，this指向对象。当直接调用函数时，this指向全局变量。
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/3.%E9%9D%A2%E8%AF%95/%E8%81%8A%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/3.%E9%9D%A2%E8%AF%95/%E8%81%8A%E9%A1%B9%E7%9B%AE/</guid>
      <description>聊项目 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/3.%E9%9D%A2%E8%AF%95/%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/3.%E9%9D%A2%E8%AF%95/%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6/</guid>
      <description>设计组件 通用组件 通用组件就是自身有一定功能逻辑，且这个逻辑是可以在多个场景下通用的。有可能其中有一些东西在不同场景下是不同的。比如现实的文字、事件、回调函数等。
通用组件 = (可变的内容，事件回调函数) =&amp;gt; { 通用的逻辑 ?=&amp;gt; 触发回调函数 return UI，显示可变的内容，触发回调函数 } 举例
倒计时组件： 通用的逻辑：倒计时 可变的部分：总时间，暂停，timeChange回调（当前时间，是否结束），倒计时UI作为默认children
在倒计时的过程中触发timeChange，根据timeChange的结果修改UI，UI可以是个进度条，可以只是一个数字。
上传图片： 通用逻辑：向接口上传文件 可变部分：可选的已上传图片，上传成功的回调返回图片url。
有图片url则显示出来，点击再上传，返回新的url。没有则显示展位UI。
封装hooks 白板hook，在canvas上打印笔迹——usePrint。
userPrint接收canvas的ref和所有笔迹lines的数组为参数。
将lines绘制到canvas上，因为有背景图，所以要对lines进行缩放转换，以适应不同的尺寸的显示。
lines是在画线条是产生的。这个hook用于在刷新页面时将lines重绘出来，在老师查看一个学生的作品时，在老师开启一个学生的展示给所有其他学生时。
storybook 用于开发过程中对组件功能的测试。
对一个插件的不同的参数、参数的组合进行测试。
可以当作测试用例，在后期修改了代码后做验证性测试。
好处：可以提高开发效率。一个组件的某些用例可能需要若干前置条件，如果用传统的办法开发、测试，就需要在页面上进行一些操作，这就会花时间。用了storybook，可以制造出特定的条件来直接测试组件。
坏处：需要学习成本，有学习能力，有写测试的能力。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/3.%E9%9D%A2%E8%AF%95/%E9%94%99%E9%A2%98%E6%9C%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/3.%E9%9D%A2%E8%AF%95/%E9%94%99%E9%A2%98%E6%9C%AC/</guid>
      <description>错题本 面试中不会或者答的不好的问题
ES6+ Map的原理，与array相比的优缺点
Promise.all如果其中有失败的结果，怎么获取到？
常用的ES6语法
箭头函数的this
网络协议 介绍一下WebSocket
移动端 适配方案——淘宝——实现原理
工程化 CI/CD怎么从原来的10多分钟优化成5分钟的
组件化 设计过什么通用的组件、复杂业务组件
设计原则
其他 擅长什么，哪里需要改进</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/4.%E7%AC%94%E8%AE%B0/%E5%B7%A6%E8%80%B3%E5%90%AC%E9%A3%8E-%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E5%85%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/4.%E7%AC%94%E8%AE%B0/%E5%B7%A6%E8%80%B3%E5%90%AC%E9%A3%8E-%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E5%85%BB/</guid>
      <description>左耳听风&amp;ndash;程序员修养&amp;ndash;笔记 「左耳听风」是极客时间的一个专栏，作者是陈浩。
程序员的修养——工程师文化——程序员的价值观
英语 用英语写注释、commit message、文档。
用英语词典 https://www.dictionary.com/
英文教材 http://www.bbc.co.uk/learningenglish/ ，https://www.rong-chang.com/eflfast/
问问题的能力 How To Ask Questions The Smart Way
The XY Problem，X-Y 问题

写代码的修养 五本书：
 代码大全 重构：改善既有代码的设计 修改代码的艺术 代码整洁之道 程序员的职业素养  code review相关
Unit Test相关
安全防范 Open Web Application Security Project，OWASP Top 10 2017 PDF 中文版
软件工程和上线 测试，上线准备和checklist，运维。
编程规范与最佳实践  可以让你的代码很规整，这有利于代码易读性，从而可以更容易地维护。 提升开发效率，我们知道，效率来自于结构化，而不是杂乱。 可以让你的软件避免一些容易掉坑的陷阱，也让 Bug 更少，质量更高。 可以让团队成员更高效率地协作。  JavaScript 语言
 JavaScript The Right Way ，一个相对比较容读的 JavaScript 编程规范，其中不但有代码规范，还有设计模式，测试工具，编程框架，游戏引擎… Google JavaScript Style Guide，Google 公司的 JavaScript 的编码规范，一个非常大而全的编程规范。 Airbnb JavaScript Style Guide，Airbnb 的 JavaScript 编程规范。没 Google 的这么大而全，但是也很丰富了。 jQuery Core Style Guide，jQuery 的代码规范。 JavaScript Clean Code，前面推荐过的《代码整洁之道》一书中的 JavaScript 的实践 。  还有一些其它相对比较简单的 JavaScript 编程规范。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/example/collapsed/3rd-level/4th-level/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/example/collapsed/3rd-level/4th-level/</guid>
      <description>4th Level of Menu Caesorum illa tu sentit micat vestes papyriferi Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.
Venasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/example/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/example/hidden/</guid>
      <description>This page is hidden in menu Quondam non pater est dignior ille Eurotas Latent te facies Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.
 Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona O fallor in sustinui iussorum equidem.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/shortcodes/buttons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/shortcodes/buttons/</guid>
      <description>Buttons Buttons are styled links that can lead to local page or external link.
Example {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}}  Get Home  Contribute  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/shortcodes/columns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/shortcodes/columns/</guid>
      <description>Columns Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic sparator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic sparator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/shortcodes/details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/shortcodes/details/</guid>
      <description>Details Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.
Example {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} {{&amp;lt; details title=&amp;#34;Title&amp;#34; open=true &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} Title Markdown content Lorem markdownum insigne&amp;hellip;   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/shortcodes/expand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/shortcodes/expand/</guid>
      <description>Expand Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example Default {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}}   Expand ↕  Markdown content Lorem markdownum insigne&amp;hellip;    With Custom Label {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}}   Custom Label .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/shortcodes/hints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/shortcodes/hints/</guid>
      <description>Hints Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/shortcodes/katex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/shortcodes/katex/</guid>
      <description>KaTeX KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example {{&amp;lt; katex [display] [class=&amp;#34;text-center&amp;#34;] &amp;gt;}} f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi {{&amp;lt; /katex &amp;gt;}}     Display Mode Example Here is some inline example:  \(\pi(x)\)  , rendered in the same line. And below is display example, having display: block  \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\]  Text continues here.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/shortcodes/mermaid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/shortcodes/mermaid/</guid>
      <description>Mermaid Chart Mermaid is library for generating svg charts and diagrams from text.
Example {{&amp;lt; mermaid [class=&amp;#34;text-center&amp;#34;]&amp;gt;}} sequenceDiagram Alice-&amp;gt;&amp;gt;Bob: Hello Bob, how are you? alt is sick Bob-&amp;gt;&amp;gt;Alice: Not so good :( else is well Bob-&amp;gt;&amp;gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-&amp;gt;&amp;gt;Alice: Thanks for asking end {{&amp;lt; /mermaid &amp;gt;}}     </description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.wss.cool/docs/shortcodes/tabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wss.cool/docs/shortcodes/tabs/</guid>
      <description>Tabs Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example MacOS MacOS This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description>
    </item>
    
  </channel>
</rss>